{"paragraphs":[{"text":"%md\n\n#Building a recommendation Engine in Spark\n\n### Step 1: Preparing the files\n\nYou only need to execute the next note if you want to download the dataset again. \nIf you allready have the data set in the correct space on HDFS, you can safely skip it.\n\n\nBefore executing the next note, please uncomment one of the dataset lines. \n\n**After executing the next note, you should see two files present on HDFS:**\n*/user/zeppelin/movielens/movies.dat*\n*/user/zeppelin/movielens/ratings.dat.gz*","dateUpdated":"Mar 15, 2016 8:27:56 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/sh","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015015_612871551","id":"20160308-181655_739034664","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Building a recommendation Engine in Spark</h1>\n<h3>Step 1: Preparing the files</h3>\n<p>You only need to execute the next note if you want to download the dataset again.\n<br  />If you allready have the data set in the correct space on HDFS, you can safely skip it.</p>\n<p>Before executing the next note, please uncomment one of the dataset lines.</p>\n<p><strong>After executing the next note, you should see two files present on HDFS:</strong>\n<br  /><em>/user/zeppelin/movielens/movies.dat</em>\n<br  /><em>/user/zeppelin/movielens/ratings.dat.gz</em></p>\n"},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:27:56 PM","dateFinished":"Mar 15, 2016 8:27:56 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:59"},{"text":"%sh\n#######################################################################################\n#uncomment one of the following lines, depending on the size of the dataset you want. #\n#######################################################################################\n\n\ndataset=\"http://files.grouplens.org/datasets/movielens/ml-1m.zip\"\n\n#dataset=\"http://files.grouplens.org/datasets/movielens/ml-10m.zip\"\n\n#dataset=\"http://files.grouplens.org/datasets/movielens/ml-20m.zip\"\n\n\n#################################################\n# The rest of this note should not be modified. #\n#################################################\n\n#Get the dataset\n\necho \"\"\nrm -rf movielens\nhadoop fs -rm -r -f /user/zeppelin/movielens/\n\n\nmkdir movielens\ncd movielens\nwget $dataset -o /dev/null -O ml.zip\nunzip ml.zip\nrm ml.zip\nmv ml* ml\ngzip ml/ratings.dat\n\n# Move the required files to HDFS\n\nhadoop fs -mkdir /user/zeppelin/movielens\nhadoop fs -put ml/movies.dat /user/zeppelin/movielens/movies.dat\nhadoop fs -put ml/ratings.dat.gz /user/zeppelin/movielens/ratings.dat.gz\n\necho \"Files in HDFS:/user/zeppelin/movielens\"\nhadoop fs -ls /user/zeppelin/movielens\necho \"\"","dateUpdated":"Mar 15, 2016 8:27:56 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/sh","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015015_612871551","id":"20160308-181655_2057667247","result":{"code":"SUCCESS","type":"TEXT","msg":"\n16/03/15 20:27:59 INFO fs.TrashPolicyDefault: Namenode trash configuration: Deletion interval = 360 minutes, Emptier interval = 0 minutes.\nMoved: 'hdfs://sandbox.hortonworks.com:8020/user/zeppelin/movielens' to trash at: hdfs://sandbox.hortonworks.com:8020/user/zeppelin/.Trash/Current\nArchive:  ml.zip\n   creating: ml-1m/\n  inflating: ml-1m/movies.dat        \n  inflating: ml-1m/ratings.dat       \n  inflating: ml-1m/README            \n  inflating: ml-1m/users.dat         \nFiles in HDFS:/user/zeppelin/movielens\nFound 2 items\n-rw-r--r--   3 zeppelin zeppelin     171308 2016-03-15 20:28 /user/zeppelin/movielens/movies.dat\n-rw-r--r--   3 zeppelin zeppelin    5903722 2016-03-15 20:28 /user/zeppelin/movielens/ratings.dat.gz\n\n"},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:27:56 PM","dateFinished":"Mar 15, 2016 8:28:16 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:60"},{"text":"%md\n\n#Step 1: Data Ingest\n\n## Change the *numPartitions* variable to something suitable for your cluster\n\nFor example, numPartitions should be 2*[number of nodes in luster]\nMake sure you have set the number of exucutors in the spark config to at least this number!\n\n**This can take a while...**\n","dateUpdated":"Mar 15, 2016 8:27:56 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015016_610947807","id":"20160308-181655_136769041","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Step 1: Data Ingest</h1>\n<h2>Change the <em>numPartitions</em> variable to something suitable for your cluster</h2>\n<p>For example, numPartitions should be 2*[number of nodes in luster]\n<br  />Make sure you have set the number of exucutors in the spark config to at least this number!</p>\n<p><strong>This can take a while&hellip;</strong></p>\n"},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:27:56 PM","dateFinished":"Mar 15, 2016 8:27:57 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:61"},{"text":"%pyspark\n\nimport sys\nimport os\n\nbaseDir         = os.path.join('movielens')\nratingsFilename = os.path.join(baseDir, 'ratings.dat.gz')\nmoviesFilename  = os.path.join(baseDir, 'movies.dat')\n\nnumPartitions = 2\nrawRatings = sc.textFile(ratingsFilename).repartition(numPartitions)\nrawMovies  = sc.textFile(moviesFilename)\n","dateUpdated":"Mar 15, 2016 10:08:09 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12,"enabled":true,"tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015016_610947807","id":"20160308-181655_869769797","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:27:56 PM","dateFinished":"Mar 15, 2016 8:27:57 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:62"},{"text":"%md\n\n#Step 2: Feature Extraction","dateUpdated":"Mar 15, 2016 8:27:56 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015017_610563058","id":"20160308-181655_299793050","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Step 2: Feature Extraction</h1>\n"},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:27:57 PM","dateFinished":"Mar 15, 2016 8:27:57 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:63"},{"text":"%pyspark\n\ndef get_ratings_tuple(entry):\n    items = entry.split('::')\n    return int(items[0]), int(items[1]), float(items[2])\n\ndef get_movie_tuple(entry):\n    items = entry.split('::')\n    return int(items[0]), items[1]\n\nratingsRDD = rawRatings.map(get_ratings_tuple).cache()\nmoviesRDD = rawMovies.map(get_movie_tuple).cache()\n\nprint 'Ratings: %s' % ratingsRDD.take(2)\nprint 'Movies: %s' % moviesRDD.take(2)\n","dateUpdated":"Mar 15, 2016 10:08:21 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015017_610563058","id":"20160308-181655_625155488","result":{"code":"SUCCESS","type":"TEXT","msg":"Ratings: [(1, 1193, 5.0), (1, 914, 3.0)]\nMovies: [(1, u'Toy Story (1995)'), (2, u'Jumanji (1995)')]\n"},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 10:08:21 PM","dateFinished":"Mar 15, 2016 10:08:24 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:64","focus":true},{"text":"%md\n\n#Step 3: Create Model – The naïve approach","dateUpdated":"Mar 15, 2016 8:27:57 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015018_611717305","id":"20160308-181655_1498285692","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Step 3: Create Model – The naïve approach</h1>\n"},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:27:57 PM","dateFinished":"Mar 15, 2016 8:27:57 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:65"},{"text":"%pyspark\n\nmovieIDsWithRatingsRDD = (ratingsRDD\n                          .map(lambda (user_id,movie_id,rating): (movie_id,[rating]))\n                          .reduceByKey(lambda a,b: a+b))\n\ndef getCountsAndAverages(RatingsTuple):\n    total = 0.0\n    for rating in RatingsTuple[1]:\n        total += rating\n    return (RatingsTuple[0],(len(RatingsTuple[1]),total/len(RatingsTuple[1])))\n\nmovieIDsWithAvgRatingsRDD = movieIDsWithRatingsRDD.map(getCountsAndAverages)\n\nmovieNameWithAvgRatingsRDD = (moviesRDD\n                .join(movieIDsWithAvgRatingsRDD)\n                .map(lambda (movieid,(name,(ratings, average))): (average, name, ratings)))\n\nprint 'movieNameWithAvgRatingsRDD: %s\\n' % movieNameWithAvgRatingsRDD.take(3)\n","dateUpdated":"Mar 15, 2016 10:08:30 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015018_611717305","id":"20160308-181655_294380722","result":{"code":"SUCCESS","type":"TEXT","msg":"movieNameWithAvgRatingsRDD: [(3.4961832061068701, u'Great Mouse Detective, The (1986)', 131), (3.7871690427698574, u'Moonstruck (1987)', 982), (2.7294117647058824, u'Waiting to Exhale (1995)', 170)]\n\n"},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 10:08:30 PM","dateFinished":"Mar 15, 2016 10:08:37 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:66","focus":true},{"text":"%md\n\n#Step 3: Create Model – The naïve approach - The result","dateUpdated":"Mar 15, 2016 8:27:57 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015019_611332556","id":"20160308-181655_2001955613","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Step 3: Create Model – The naïve approach - The result</h1>\n"},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:27:57 PM","dateFinished":"Mar 15, 2016 8:27:57 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:67"},{"text":"%pyspark\n\ndef sortFunction(tuple):\n    key = unicode('%.3f' % tuple[0])\n    value = tuple[1]\n    return (key + ' ' + value)\n\nmovieLimitedAndSortedByRatingRDD = (movieNameWithAvgRatingsRDD\n                                    .filter(lambda (average, name, ratings): ratings > 500)\n                                    .sortBy(sortFunction, False))\n\nprint 'Movies with highest ratings: %s' % movieLimitedAndSortedByRatingRDD.take(20)\n","dateUpdated":"Mar 15, 2016 10:08:42 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015019_611332556","id":"20160308-181655_94206495","result":{"code":"SUCCESS","type":"TEXT","msg":"Movies with highest ratings: [(4.5605095541401273, u'Seven Samurai (The Magnificent Seven) (Shichinin no samurai) (1954)', 628), (4.554557700942973, u'Shawshank Redemption, The (1994)', 2227), (4.524966261808367, u'Godfather, The (1972)', 2223), (4.5205479452054798, u'Close Shave, A (1995)', 657), (4.5171060011217046, u'Usual Suspects, The (1995)', 1783), (4.510416666666667, u\"Schindler's List (1993)\", 2304), (4.5079365079365079, u'Wrong Trousers, The (1993)', 882), (4.4777247414478918, u'Raiders of the Lost Ark (1981)', 2514), (4.4761904761904763, u'Rear Window (1954)', 1050), (4.4536944165830823, u'Star Wars: Episode IV - A New Hope (1977)', 2991), (4.4498902706656915, u'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb (1963)', 1367), (4.4256465517241379, u'To Kill a Mockingbird (1962)', 928), (4.4156079854809436, u'Double Indemnity (1944)', 551), (4.4128220491312167, u'Casablanca (1942)', 1669), (4.4062627084180566, u'Sixth Sense, The (1999)', 2459), (4.401925391095066, u'Lawrence of Arabia (1962)', 831), (4.3959731543624159, u'Maltese Falcon, The (1941)', 1043), (4.3907246376811591, u\"One Flew Over the Cuckoo's Nest (1975)\", 1725), (4.3888888888888893, u'Citizen Kane (1941)', 1116), (4.386993603411514, u'Bridge on the River Kwai, The (1957)', 938)]\n"},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 10:08:42 PM","dateFinished":"Mar 15, 2016 10:08:42 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:68","focus":true},{"text":"%md\n\n#Step 3: Create Model – Collaborative Filtering - Separate dataset","dateUpdated":"Mar 15, 2016 8:27:57 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015020_609408811","id":"20160308-181655_633113626","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Step 3: Create Model – Collaborative Filtering - Separate dataset</h1>\n"},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:27:57 PM","dateFinished":"Mar 15, 2016 8:27:57 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:69"},{"text":"%pyspark\n\ntrainingRDD, validationRDD, testRDD = ratingsRDD.randomSplit([6, 2, 2], seed=0L)\n\nprint 'Training: %s, validation: %s, test: %s\\n' % (trainingRDD.count(),\n                                                    validationRDD.count(),\n                                                    testRDD.count())\n","dateUpdated":"Mar 15, 2016 8:27:57 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015020_609408811","id":"20160308-181655_2106724944","result":{"code":"SUCCESS","type":"TEXT","msg":"Training: 600379, validation: 199819, test: 200011\n\n"},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:28:03 PM","dateFinished":"Mar 15, 2016 8:28:08 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:70"},{"text":"%md\n\n#Step 3: Create Model – Collaborative Filtering - computeError function","dateUpdated":"Mar 15, 2016 8:27:57 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015021_609024062","id":"20160308-181655_15762072","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Step 3: Create Model – Collaborative Filtering - computeError function</h1>\n"},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:27:57 PM","dateFinished":"Mar 15, 2016 8:27:57 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:71"},{"text":"%pyspark\n\nimport math\n\ndef computeError(predictedRDD, actualRDD):\n    predictedReformattedRDD = (predictedRDD\n            .map(lambda (UserID, MovieID, Rating):((UserID, MovieID), Rating)) )\n                               \n    actualReformattedRDD = (actualRDD\n            .map(lambda (UserID, MovieID, Rating):((UserID, MovieID), Rating)) )\n    \n    squaredErrorsRDD = (predictedReformattedRDD\n                        .join(actualReformattedRDD)\n                        .map(lambda (k,(a,b)): math.pow((a-b),2)))\n\n    totalError = squaredErrorsRDD.reduce(lambda a,b: a+b)\n    numRatings = squaredErrorsRDD.count()\n\n    return math.sqrt(float(totalError)/numRatings)\n","dateUpdated":"Mar 15, 2016 8:27:57 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015021_609024062","id":"20160308-181655_772655523","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:28:04 PM","dateFinished":"Mar 15, 2016 8:28:08 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:72"},{"text":"%md\n\n#Step 3: Create Model – Collaborative Filtering - Training the model, finding the best rank","dateUpdated":"Mar 15, 2016 8:27:57 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015021_609024062","id":"20160308-181655_187761652","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Step 3: Create Model – Collaborative Filtering - Training the model, finding the best rank</h1>\n"},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:27:58 PM","dateFinished":"Mar 15, 2016 8:27:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:73"},{"text":"%pyspark\n\nimport numpy\nfrom pyspark.mllib.recommendation import ALS\n\nvalidationForPredictRDD = validationRDD.map(lambda (UserID, MovieID, Rating): (UserID, MovieID))\n\nranks = [4, 8, 12]\nerrors = [0, 0, 0]\nerr = 0\n\nminError = float('inf')\nbestRank = -1\nbestIteration = -1\nfor rank in ranks:\n    model = ALS.train(trainingRDD, rank, seed=5L, iterations=5, lambda_=0.1)\n    predictedRatingsRDD = model.predictAll(validationForPredictRDD)\n    error = computeError(predictedRatingsRDD, validationRDD)\n    errors[err] = error\n    err += 1\n    print 'For rank %s the RMSE is %s' % (rank, error)\n    if error < minError:\n        minError = error\n        bestRank = rank\n\nprint 'The best model was trained with rank %s' % bestRank","dateUpdated":"Mar 15, 2016 8:27:57 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015022_610178309","id":"20160308-181655_1056607721","result":{"code":"SUCCESS","type":"TEXT","msg":"For rank 4 the RMSE is 0.90331036866\nFor rank 8 the RMSE is 0.892769217713\nFor rank 12 the RMSE is 0.885775245384\nThe best model was trained with rank 12\n"},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:28:08 PM","dateFinished":"Mar 15, 2016 8:28:50 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:74"},{"text":"%md\n\n#Step 3: Create Model – Collaborative Filtering - Testing the model","dateUpdated":"Mar 15, 2016 8:27:57 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015022_610178309","id":"20160308-181655_863689804","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Step 3: Create Model – Collaborative Filtering - Testing the model</h1>\n"},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:27:58 PM","dateFinished":"Mar 15, 2016 8:27:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:75"},{"text":"%pyspark\n\nmyModel = ALS.train(trainingRDD, 8, seed=5L, iterations=5, lambda_=0.1)\n\ntestForPredictingRDD = testRDD.map(lambda (UserID, MovieID, Rating): (UserID, MovieID))\n\npredictedTestRDD = myModel.predictAll(testForPredictingRDD)\n\ntestRMSE = computeError(testRDD, predictedTestRDD)\n\nprint 'The model had a RMSE on the test set of %s' % testRMSE","dateUpdated":"Mar 15, 2016 8:27:58 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015023_609793560","id":"20160308-181655_1192565755","result":{"code":"SUCCESS","type":"TEXT","msg":"The model had a RMSE on the test set of 0.894306376058\n"},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:28:09 PM","dateFinished":"Mar 15, 2016 8:29:05 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:76"},{"text":"%md\n\n#Step 3: Create Model – Collaborative Filtering - Adding my preferences","dateUpdated":"Mar 15, 2016 8:27:58 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015023_609793560","id":"20160308-181655_987766834","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Step 3: Create Model – Collaborative Filtering - Adding my preferences</h1>\n"},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:27:58 PM","dateFinished":"Mar 15, 2016 8:27:58 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:77"},{"text":"%pyspark\n\nmyRatedMovies = [                                   # Rating\n    (0, 845,5.0),  # Blade Runner (1982)            - 5.0/5\n    (0, 789,4.5),  # Good Will Hunting (1997)       - 4.5/5\n    (0, 983,4.8),  # Christmas Story, A (1983)      - 4.8/5\n    (0, 551,2.0),  # Taxi Driver (1976)             - 2.0/5\n    (0,1039,2.0),  # Pulp Fiction (1994)            - 2.0/5\n    (0, 651,5.0),  # Dr. Strangelove (1963)         - 5.0/5\n    (0,1195,4.0),  # Raiders of the Lost Ark (1981) - 4.0/5\n    (0,1110,5.0),  # Sixth Sense, The (1999)        - 4.5/5\n    (0,1250,4.5),  # Matrix, The (1999)             - 4.5/5\n    (0,1083,4.0)   # Princess Bride, The (1987)     - 4.0/5\n    ]\nmyRatingsRDD = sc.parallelize(myRatedMovies)","dateUpdated":"Mar 15, 2016 8:27:58 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015024_620181780","id":"20160308-181655_1348587728","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:28:51 PM","dateFinished":"Mar 15, 2016 8:29:05 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:78"},{"text":"%md\n\n#Step 3: Create Model – Collaborative Filtering - re-training model including my preferences","dateUpdated":"Mar 15, 2016 8:27:58 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015024_620181780","id":"20160308-181655_1171534058","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Step 3: Create Model – Collaborative Filtering - re-training model including my preferences</h1>\n"},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:27:58 PM","dateFinished":"Mar 15, 2016 8:27:59 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:79"},{"text":"%pyspark\n\ntrainingWithMyRatingsRDD = myRatingsRDD.union(trainingRDD)\nmyRatingsModel = ALS.train(trainingWithMyRatingsRDD, 8, seed=5L, iterations=5, lambda_=0.1)\npredictedTestMyRatingsRDD = myRatingsModel.predictAll(testForPredictingRDD)\ntestRMSEMyRatings = computeError(testRDD, predictedTestMyRatingsRDD)\n\nprint 'The model had a RMSE on the test set of %s' % testRMSEMyRatings","dateUpdated":"Mar 15, 2016 8:27:58 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015025_619797031","id":"20160308-181655_1842837110","result":{"code":"SUCCESS","type":"TEXT","msg":"The model had a RMSE on the test set of 0.885820940388\n"},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:29:05 PM","dateFinished":"Mar 15, 2016 8:29:19 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:80"},{"text":"%md\n\n#Step 3: Create Model – Collaborative Filtering - Predicting my recommendations","dateUpdated":"Mar 15, 2016 8:27:58 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015025_619797031","id":"20160308-181655_1554150736","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Step 3: Create Model – Collaborative Filtering - Predicting my recommendations</h1>\n"},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:27:59 PM","dateFinished":"Mar 15, 2016 8:27:59 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:81"},{"text":"%pyspark\n\nmyUnratedMoviesRDD = (moviesRDD\n                      .map(lambda (movieID, name): movieID)\n                      .filter(lambda movieID: movieID not in [ mine[1] for mine in myRatedMovies] )\n                      .map(lambda movieID: (0, movieID)))\n\npredictedRatingsRDD = myRatingsModel.predictAll(myUnratedMoviesRDD)\n","dateUpdated":"Mar 15, 2016 8:27:58 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015025_619797031","id":"20160308-181655_767821491","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:29:06 PM","dateFinished":"Mar 15, 2016 8:29:19 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:82"},{"text":"%md\n\n#Step 3: Create Model – Collaborative Filtering - The result","dateUpdated":"Mar 15, 2016 8:27:58 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015026_620951278","id":"20160308-181655_546564414","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>Step 3: Create Model – Collaborative Filtering - The result</h1>\n"},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:27:59 PM","dateFinished":"Mar 15, 2016 8:27:59 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:83"},{"text":"%pyspark\n\nmovieCountsRDD = (movieIDsWithAvgRatingsRDD\n                  .map(lambda (MovieID, (ratings, average)): (MovieID, ratings)) )\n\npredictedRDD = predictedRatingsRDD.map(lambda (uid, movie_id, rating): (movie_id, rating))\n\npredictedWithCountsRDD = (predictedRDD.join(movieCountsRDD))\n\nratingsWithNamesRDD = (predictedWithCountsRDD\n                       .join(moviesRDD)\n                       .map(lambda (movieID, ((pred, ratings), name)): (pred, name, ratings) )\n                       .filter(lambda (pred, name, ratings): ratings > 75))\n\npredictedHighestRatedMovies = ratingsWithNamesRDD.takeOrdered(20, key=lambda x: -x[0])\n\nprint ('My highest rated movies as predicted (for movies with more than 75 reviews):\\n%s' %\n        '\\n'.join(map(str, predictedHighestRatedMovies)))","dateUpdated":"Mar 15, 2016 8:27:58 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/markdown","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015026_620951278","id":"20160308-181655_1320547879","result":{"code":"SUCCESS","type":"TEXT","msg":"My highest rated movies as predicted (for movies with more than 75 reviews):\n(4.2589932318501118, u\"It's a Wonderful Life (1946)\", 729)\n(4.1882793725392506, u'Inherit the Wind (1960)', 268)\n(4.1295750208552704, u'Gone with the Wind (1939)', 1156)\n(4.1277749230847141, u'White Christmas (1954)', 271)\n(4.1192923626470028, u'Ben-Hur (1959)', 704)\n(4.1124478854112452, u'Adventures of Robin Hood, The (1938)', 378)\n(4.1084599110712583, u'My Fair Lady (1964)', 636)\n(4.1042940280843192, u'Miracle on 34th Street (1947)', 380)\n(4.0839770694500865, u'To Kill a Mockingbird (1962)', 928)\n(4.0816777756353906, u'Quiet Man, The (1952)', 226)\n(4.0723005711192348, u'Star Wars: Episode IV - A New Hope (1977)', 2991)\n(4.0628475742646879, u'Wizard of Oz, The (1939)', 1718)\n(4.0545187891304675, u'Roman Holiday (1953)', 425)\n(4.0531173656437032, u\"Schindler's List (1993)\", 2304)\n(4.042777429669866, u'Mr. Smith Goes to Washington (1939)', 383)\n(4.0385281482528281, u'Sound of Music, The (1965)', 882)\n(4.0300554386705487, u'King and I, The (1956)', 372)\n(4.027662637117845, u'Saving Private Ryan (1998)', 2653)\n(4.0221069494387134, u'Casablanca (1942)', 1669)\n(4.0174924073108835, u'Sting, The (1973)', 1049)\n"},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:29:19 PM","dateFinished":"Mar 15, 2016 8:29:24 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:84"},{"dateUpdated":"Mar 15, 2016 8:27:58 PM","config":{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12,"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1457461015027_620566529","id":"20160308-181655_204710608","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Mar 8, 2016 6:16:55 PM","dateStarted":"Mar 15, 2016 8:29:20 PM","dateFinished":"Mar 15, 2016 8:29:20 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:85"}],"name":"Recommendation Engine","id":"2BFWFJRK6","angularObjects":{"2BCKC8XEM":[],"2BCX68DXU":[],"2BFBT15Z1":[],"2BESYJRTZ":[],"2BCBP9D5X":[],"2BDTPNC5U":[],"2BF9DMDST":[],"2BEA4YGRP":[],"2BEP4GTHY":[],"2BD3W8Y9X":[],"2BEJY9WFY":[],"2BCSDJUE3":[],"2BEPFKEXV":[]},"config":{"looknfeel":"default"},"info":{}}